syntax = "proto3";
package auction;

service Auction {
  rpc ListTrades(ListTradesRequest) returns (ListTradesResponse) {}
  rpc CreateTrade(CreateTradeRequest) returns (CreateTradeResponse) {}
  rpc Bid(BidRequest) returns (BidResponse) {}
  rpc Buyout(BuyoutRequest) returns (BuyoutResponse) {}
  rpc CancelTrade(CancelTradeRequest) returns (CancelTradeResponse) {}
}

message CreateTradeRequest {
  // The unique item id, that represented as UUID as a string.
  string item_id = 1;
  // The item name that supposed to be sold.
  string item_name = 2;
  // The current bid price for the item. Always must be set.
  int64 bid_price = 3;
  // The buyout price. If set, then it must be greater than the bid_price.
  int64 buyout_price = 4;
  // The account / character UUID.
  string created_by = 5;
  // The account / character name who created the trade.
  string created_by_username = 6;
  // Defines when the trade expires. The argument passed in seconds. Optional.
  int64 expire_in = 7;
}

message CreateTradeResponse {
}

message ListTradesRequest {
  int32 page = 1;
  int32 page_size = 2;
  FilterParams filter_params = 3;
}

message FilterParams {
  // The item name that expected to filter by. Can be a substring.
  optional string item_name = 1;
  // Min acceptable bid price (inclusive).
  optional int64 min_price = 2;
  // Max acceptable bid price (inclusive).
  optional int64 max_price = 3;
  // Min acceptable buyout price (inclusive).
  optional int64 min_buyout_price = 4;
  // Max acceptable buyout price (inclusive).
  optional int64 max_buyout_price = 5;
}

message ListTradesResponse {
  // The requested page number.
  int32 page = 1;
  // The amount of entries per page.
  int32 page_size = 2;
  // List of trade for the requested page.
  repeated Trade trades = 3;
}

message Trade {
  // The unique identifier of the trade.
  string id = 1;
  // The unique item identifier.
  string item_id = 2;
  // The human-readable name of the item.
  string item_name = 3;
  // The current minimal price to set a new bid.
  int64 bid_price = 4;
  // The buyout price for the item (if was set).
  int64 buyout_price = 5;
  // The account / character UUID who created the trade.
  string created_by = 6;
  // The account / character name of the trade owner
  string created_by_username = 7;
  // Defines the moment of time when the trade was created. Represented as
  // a timestamp in the POSIX format
  int64 created_at = 8;
  // The account / character UUID who bought the item.
  string bought_by = 9;
  // The human-readable representation of the buyer.
  string bought_by_username = 10;
  // Defines the moment of time when the trade was created. Represented as
  // a timestamp in the POSIX format.
  optional int64 expired_at = 11;
}

message BidRequest {
  // The account / character UUID
  string user_id = 1;
  // The human-readable player's name representation
  string username = 2;
  // The amount of currency used for the bid operation.
  int64 amount = 3;
}

message BidResponse {
}

message BuyoutRequest {
  // The account / character UUID
  string user_id = 1;
  // The human-readable player's name representation
  string username = 2;
  // The amount of currency used for the buyout operation.
  int64 amount = 3;
}

message BuyoutResponse {
}

message CancelTradeRequest {
  // The initiator that requested to cancel / delete a trade.
  string user_id = 1;
}

message CancelTradeResponse {
}

